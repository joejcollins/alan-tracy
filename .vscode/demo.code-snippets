{

    "Add logging for discovery": {
        "prefix": "demo01log",
        "body": [
            "from loguru import logger",
            "logger.info(f\"Received request for {digit}\")"
        ],
        "description": "Add logging to the endpoint so we can see what is happening"
    },
    "Http exploration of the meaning of life": {
        "prefix": "demo02http01",
        "body": [
            "### Confirm the meaning of life",
            "GET http://127.0.0.1:8000/the_answer/42",
            "> {%",
            "    client.test(\"Request executed successfully\", function() {",
            "        client.assert(response.status === 200, \"Response status is not 200\");",
            "        client.assert(response.body.startsWith(\"life the universe\"), \"Response body is not right\");",
            "    });",
            "    console.log(\"response :\", response.body);",
            "%}"
        ],
        "description": "Try the HTTP endpoint to see if you get the meaning of life message"
    },
    "Http exploration with the number two": {
        "prefix": "demo02http02",
        "body": [
            "### Confirm that one and one is two",
            "GET http://127.0.0.1:8000/the_answer/2",
            "> {%",
            "    client.test(\"Request executed successfully\", function() {",
            "        client.assert(response.status === 200, \"Response status is not 200\");",
            "        client.assert(response.body.what_was_written === 2, \"Response body is not right\");",
            "    });",
            "    console.log(\"response :\", response.body.what_was_written);",
            "%}"
        ],
        "description": "Try the HTTP endpoint to see if some math works"
    },
    "Automated test of the meaning of life": {
        "prefix": "demo03test01",
        "body": [
            "def test_the_meaning_of_life() -> None:",
            "    \"\"\"Test.\"\"\"",
            "    # Arrange",
            "    client = testclient.TestClient(app.app)",
            "    # Act",
            "    response = client.get(\"/the_answer/42\")",
            "    # Assert",
            "    assert response.status_code == http.HTTPStatus.OK",
            "    assert response.json() == \"life the universe and everything\"",
        ],
        "description": "Test the meaning of life endpoint"
    },
    "Automated test of the number two": {
        "prefix": "demo03test02",
        "body": [
            "def test_one_and_one_is_two() -> None:",
            "    \"\"\"Test.\"\"\"",
            "    # Arrange",
            "    client = testclient.TestClient(app.app)",
            "    # Act",
            "    response = client.get(\"/the_answer/2\")",
            "    # Assert",
            "    assert response.status_code == http.HTTPStatus.OK",
            "    assert response.json()[\"what_was_written\"] == \"2\"",
        ],
        "description": "Test the meaning maths endpoint"
    },
    "Add a separate function": {
        "prefix": "demo4function01",
        "body": [
            "    return qwer(digit)",
            "",
            "def qwer(digit):"
        ],
        "description": "Separate the logic from the endpoint"
    },
    "Add a feature flag": {
        "prefix": "demo5flag01",
        "body": [
            "if unleash.toggle(\"joe-new-function\"):",
            "    return qwer(digit)",
            "else:",
        ],
        "description": "Add a feature flag to the endpoint"
    },
    "Rewrite the function": {
        "prefix": "demo6new01",
        "body": [
            "def asdf(digit):",
            "\t\"\"\"",
            "\tTakes a number, writes it to a file, and returns related information.",
            "\t\"\"\"",
            "\tglobal duck_tape",
            "\tduck_tape += 1",
            "",
            "\t# Special case for 42",
            "\tif digit == 42:",
            "\t\treturn (",
            "\t\t\t\"life the universe and everything\"",
            "\t\t\tif duck_tape % 10 != 0",
            "\t\t\telse \"the meaning of life by Monty Python\"",
            "\t\t)",
            "",
            "\t# Number-to-word mapping",
            "\tnumber_words = {",
            "\t\t0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\",",
            "\t\t6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\", 10: \"ten\",",
            "\t\t11: \"eleven\", 12: \"twelve\", 13: \"thirteen\", 14: \"fourteen\", 15: \"fifteen\",",
            "\t\t16: \"sixteen\", 17: \"seventeen\", 18: \"eighteen\", 19: \"nineteen\", 20: \"twenty\",",
            "\t\t30: \"thirty\", 40: \"forty\", 50: \"fifty\", 60: \"sixty\", 70: \"seventy\",",
            "\t\t80: \"eighty\", 90: \"ninety\"",
            "\t}",
            "",
            "\t# Convert number to word representation",
            "\tif digit in number_words:",
            "\t\tword_repr = number_words[digit]",
            "\telif digit < 100:",
            "\t\ttens, ones = divmod(digit, 10)",
            "\t\tword_repr = f\"{number_words[tens * 10]}-{number_words[ones]}\"",
            "\telse:",
            "\t\tword_repr = \"lots\"",
            "",
            "\t# Construct file path",
            "\tfile_name = f\"{word_repr.replace(' ', '_')}.txt\"",
            "\tfile_path = os.path.join(config.RAW_DATA_DIR, file_name)",
            "",
            "\t# Write digit to file",
            "\twith open(file_path, \"w\") as file:",
            "\t\tfile.write(str(digit))",
            "",
            "\t# Compute division result",
            "\tfirst_number = digit // 2",
            "\tother_number = digit - first_number",
            "",
            "\t# Read back what was written",
            "\tprevious_content = None",
            "\tif os.path.exists(file_path):",
            "\t\twith open(file_path, \"r\") as file:",
            "\t\t\tprevious_content = file.read()",
            "",
            "\treturn {",
            "\t\t\"first_number\": first_number,",
            "\t\t\"other_number\": other_number,",
            "\t\t\"what_was_written\": previous_content,",
            "\t}"
        ],
        "description": "Add the new function"
    },
}